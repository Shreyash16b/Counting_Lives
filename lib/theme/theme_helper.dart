import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.gray50,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.only(
              topLeft: Radius.circular(22.h),
              topRight: Radius.circular(22.h),
              bottomLeft: Radius.circular(21.h),
              bottomRight: Radius.circular(21.h),
            ),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        side: BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.gray20002,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.gray800,
          fontSize: 16.fSize,
          fontFamily: 'Mulish',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: colorScheme.primary,
          fontSize: 14.fSize,
          fontFamily: 'Mulish',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.black900,
          fontSize: 11.fSize,
          fontFamily: 'Mulish',
          fontWeight: FontWeight.w400,
        ),
        titleMedium: TextStyle(
          color: Color(0XFF4D4D4D),
          fontSize: 16.fSize,
          fontFamily: 'Mulish',
          fontWeight: FontWeight.w700,
        ),
        titleSmall: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 14.fSize,
          fontFamily: 'Mulish',
          fontWeight: FontWeight.w700,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFFFF5555),
    secondaryContainer: Color(0X1E767680),

    // On colors(text colors)
    onPrimary: Color(0XFF1F1F1F),
    onPrimaryContainer: Color(0XFFAAD400),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Black
  Color get black900 => Color(0XFF000000);

  // Cyan
  Color get cyan50 => Color(0XFFDAFFF8);

  // DeepOrange
  Color get deepOrange300 => Color(0XFFFF9955);

  // Gray
  Color get gray100 => Color(0XFFF2F2F2);
  Color get gray200 => Color(0XFFEFEFEF);
  Color get gray20001 => Color(0XFFECECEC);
  Color get gray20002 => Color(0XFFEBEBEB);
  Color get gray300 => Color(0XFFE6E6E6);
  Color get gray400 => Color(0XFFBDBDBD);
  Color get gray40001 => Color(0XFFC8C6C6);
  Color get gray40002 => Color(0XFFBEBEBE);
  Color get gray50 => Color(0XFFFBFBFB);
  Color get gray500 => Color(0XFF8F8F8F);
  Color get gray50001 => Color(0XFFA7A7A7);
  Color get gray50002 => Color(0XFF9F9F9F);
  Color get gray700 => Color(0XFF616161);
  Color get gray800 => Color(0XFF4D4D4D);
  Color get gray80001 => Color(0XFF454545);
  Color get gray900 => Color(0XFF272727);

  // Grayc
  Color get gray8004c => Color(0X4C3C3C43);

  // Pink
  Color get pink300 => Color(0XFFFF5599);

  // Teal
  Color get tealA700 => Color(0XFF00D4AA);

  // White
  Color get whiteA700 => Color(0XFFFFFFFF);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
